import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

public class MemberHashMap {
	
	// HashMap, Map인터페이스에서 가장 많이 쓰이는 클래스
	// <key, value> 쌍으로 관리하는 메서드를 구현, 검색을 위한 자료구조로 많이 쓰인다
	// key를 이용하여 값을 저장, 꺼내오는 방식. (hash 알고리즘으로 구현)
	// key는 중복불가로 객체의 유일성을 비교를 위한 equals와 hashCode 메서드를 구현해야 함
	private HashMap<Integer, Member> hashMap;
	
	public MemberHashMap() {
		hashMap = new HashMap<>();
	}
	
	public void addMember(Member member) { // key-value
		hashMap.put(member.getMemberId(), member);
	}
	
	public boolean removeMember(int memberId) { // key
		if(hashMap.containsKey(memberId)) {
			hashMap.remove(memberId);
		}
		System.out.println("not found");
		return false;
	}

	public void showAllMember() {

		// HashMap에서도 Iterator는 가능하나, 값 하나만을 불러와서 해야하기에 key값을 가져와서 변수에 담아준다.
		Iterator<Integer> ir = hashMap.keySet().iterator(); 
		
		while(ir.hasNext()) {
			int key = ir.next();
			Member member = hashMap.get(key); // 가져온 변수를 인스턴스에다가 담음
			System.out.println(member); // value
		}
		
		
	}
	// put = set, get = get, 

	// containsKey(Object key) 
	// Returns true if this map contains a mapping for thespecified key.

	// boolean containsValue(Object value) 
	// Returns true if this map maps one or more keys to thespecified value. 

	
	// get(Object key) Returns the value to which the specified key is mapped,or null if this map contains no mapping for the key.
	// keySet() Returns a Set view of the keys contained in this map. all
	// put(K key, V value) Associates the specified value with the specified key in this map.
	// values() Returns a Collection view of the values contained in this map.
}
